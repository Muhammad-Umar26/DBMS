--Q11:
SELECT DEPT_ID FROM STUDENTS GROUP BY DEPT_ID HAVING(SUM(FEE_PAID)) > 1000000;

--Q12:
SELECT DEPT_ID FROM FACULTY WHERE SALARY > 100000 GROUP BY DEPT_ID HAVING(COUNT(DEPT_ID)) >= 3;

--Q13:
DELETE FROM STUDENTS WHERE GPA < (SELECT AVG(GPA) FROM STUDENTS);

--Q14:
DELETE FROM COURSES WHERE COURSE_ID NOT IN (SELECT DISTINCT COURSE_ID FROM ENROLLMENTS);

--Q15:
INSERT INTO HIGH_FEE_STUDENTS (SELECT * FROM STUDENTS WHERE FEE_PAID > (SELECT AVG(FEE_PAID) FROM STUDENTS));

--Q16:
INSERT INTO RETIRED_FACULTY (SELECT * FROM FACULTY WHERE JOINING_DATE < (SELECT MIN(JOINING_DATE) FROM FACULTY));

--Q17:
SELECT * FROM (SELECT DEPT_ID, SUM(FEE_PAID) AS TOTAL_FEES_COLLECTED FROM STUDENTS GROUP BY DEPT_ID ORDER BY TOTAL_FEES_COLLECTED DESC) WHERE ROWNUM <= 1;

--Q18:
SELECT * FROM (SELECT COURSE_ID, COUNT(COURSE_ID) AS TOTAL_ENROLLMENTS FROM ENROLLMENTS GROUP BY COURSE_ID ORDER BY TOTAL_ENROLLMENTS DESC) WHERE ROWNUM <= 3;

--Q19:
SELECT e.STUDENT_ID, COUNT(e.COURSE_ID) AS ENROLLED_COURSES, (SELECT GPA FROM STUDENTS s WHERE s.STUDENT_ID = e.STUDENT_ID) AS GPA FROM ENROLLMENTS e
WHERE STUDENT_ID IN (
    SELECT s.STUDENT_ID FROM STUDENTS s WHERE s.GPA > (SELECT AVG(GPA) FROM STUDENTS))
GROUP BY e.STUDENT_ID
HAVING COUNT(e.COURSE_ID) > 3;

--Q20:
INSERT INTO UNASSIGNED_FACULTY (SELECT * FROM FACULTY WHERE FACULTY_ID NOT IN (SELECT FACULTY_ID FROM TEACHES));
