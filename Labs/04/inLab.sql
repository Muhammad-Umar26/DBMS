--Q1:
SELECT DEPT_ID, COUNT(*) AS TOTAL_STUDENTS FROM STUDENTS GROUP BY DEPT_ID; -- METHOD 1
SELECT DEPT_ID, (SELECT COUNT(*) FROM STUDENTS s WHERE S.DEPT_ID = d.DEPT_ID) AS TOTAL_STUDENTS FROM DEPARTMENTS d; -- METHOD 2

--Q2:
SELECT DEPT_ID, ROUND(AVG(GPA), 2) AS AVERAGE_GPA FROM STUDENTS GROUP BY DEPT_ID HAVING AVG(GPA) > 3.0;

--Q3:
SELECT e.COURSE_ID, ROUND(AVG(s.FEE_PAID), 2) AS AVERAGE_FEE_PAID FROM STUDENTS s, ENROLLMENTS e WHERE s.STUDENT_ID = e.STUDENT_ID GROUP BY e.COURSE_ID; -- METHOD 1
SELECT e.COURSE_ID, ROUND(AVG(s.FEE_PAID), 2) AS AVERAGE_FEE_PAID FROM STUDENTS s JOIN ENROLLMENTS e ON s.STUDENT_ID = e.STUDENT_ID GROUP BY e.COURSE_ID; -- METHOD 2

--Q4:
SELECT DEPT_ID, COUNT(*) AS TOTAL_FACULTY_MEMBERS FROM FACULTY GROUP BY DEPT_ID;

--Q5:
SELECT * FROM FACULTY WHERE SALARY > (SELECT AVG(SALARY) FROM FACULTY);

--Q6:
SELECT * FROM STUDENTS WHERE GPA > ANY(SELECT GPA FROM STUDENTS WHERE DEPT_ID = (SELECT DEPT_ID FROM DEPARTMENTS WHERE DEPT_NAME = 'CS'));

--Q7:
SELECT * FROM (SELECT * FROM STUDENTS ORDER BY GPA DESC) WHERE ROWNUM <= 3;

--Q8:
SELECT s.STUDENT_ID, s.STUDENT_NAME FROM STUDENTS s WHERE NOT EXISTS (
    SELECT COURSE_ID FROM ENROLLMENTS e1 WHERE e1.STUDENT_ID = (
        SELECT STUDENT_ID FROM STUDENTS WHERE STUDENT_NAME = 'Ali'
    )
    AND NOT EXISTS ( 
        SELECT 1 FROM ENROLLMENTS e2 WHERE e2.STUDENT_ID = s.STUDENT_ID AND e2.COURSE_ID = e1.COURSE_ID
    )
);

--Q9:
SELECT DEPT_ID, SUM(FEE_PAID) AS TOTAL_FEES_PAID FROM STUDENTS GROUP BY DEPT_ID;

--Q10:
SELECT DISTINCT e.COURSE_ID FROM ENROLLMENTS e WHERE e.STUDENT_ID IN (SELECT s.STUDENT_ID FROM STUDENTS s WHERE s.GPA > 3.5);
